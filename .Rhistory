ls()
getwd()
a <- read.csv("C:/Users/usuario/Dropbox/R/00_CurvaPresionVolumen/CURVA+PRESION-VOLUMEN.jpg")
a <- read.csv("C:/Users/usuario/Dropbox/R/00_CurvaPresionVolumen/CurvaPresionVolumen.csv")
a
CRA <- a$CRA
CRA
CRA <- c(0.9386,0.9172,0.8791,0.8752,0.8546,0.8411,0.8266,0.8093,0.7759,0.7397,0.7007,0.6828,0.6617)
CRA
IPH <- 1/a$Phi
OPH
IPH
library(inflection)
#definir directorio de trabajo
setwd("C:/Users/usuario/Dropbox/R/00_CurvaPresionVolumen/")
#Librerias
library(inflection)
#cargar datos
Curva <- read.csv("CurvaPresionVolumen.csv")
Curva$Peso <- Curva$Peso/1000
#Phi inverso
Curva$InversePhi <- 1/Curva$Phi
#uno menos CRA
Curva$UnoMenosCRA <- 1 - Curva$CRA
#Phi inverso
y <- 1/Curva$Phi
#uno menos CRA
x <- 1 - Curva$CRA
library(PVCurve)
PVCurve(x,y)
library("remotes")
install.packages("remotes")
library(remotes)
install_github("klauswiese/PVCurve")
?PVCurve
?PVCurve
?`PVCurve-package`
CRA <- c(0.9386,0.9172,0.8791,0.8752,0.8546,0.8411,0.8266,0.8093,0.7759,0.7397,0.7007,0.6828,0.6617)
IPH <- c(2.857,2.500,2.000,1.818,1.666,1.428,1.250,1.086,0.952,0.869,0.781,0.657, 0.606)
#Estimate Parameters from Preassure - Volume Curve
PVCurve(1 - CRA, IPH)
PVCurve <- function(x,y){
#Encontrar punto de inflexión
Inflexion <- ede(x, y, 0)
#Generar curvas según punto de inflexión
#Curva 1
lm1 <- lm(y[1:Inflexion[1]] ~ x[1:Inflexion[1]])
#Curva 2
lm2 <- lm(y[Inflexion[1]:length(y)] ~ x[Inflexion[1]:length(x)])
#Distribución de Puntos
plot(x, y, xlab="1 - CRA", ylab=expression(paste("1 / ", psi)), pch=16, main="Curva Presión - Volumen",
xlim=c(-0.001, max(x)+0.5), ylim=c(-0.001, max(y)))
abline(v=0)
abline(h=0)
grid(col="black")
box()
abline(lm1, col="red")
abline(lm2, col="darkgreen")
legend("topright", c("Curva 1", "Curva 2"), col=c("red", "darkgreen"), lty=1)
#Índices derivados de la curva presión - volumen
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
PI <- c()
points(x[Inflexion[1]], y[Inflexion[1]], pch=20, col="red")
text(x[Inflexion[1]] + 0.05, y[Inflexion[1]] + 0.05, expression(paste(psi, rho, "= 0")))
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
IPOPT <- lm2$coefficients[1]
points(0, IPOPT, pch=10)
text(0.01, IPOPT + 0.1, expression(paste("1 / ", psi^100)))
####################################################
#Inverso del potencial osmótico a turgencia cero   #
####################################################
IPOTC <- predict(lm2, 1)[1]
points(0, IPOTC , pch=8)
text(0 +0.1, IPOTC, expression(paste("1/", psi^0)))
#############################################
#Contenido hídrico relativo a turgencia cero#
#############################################
CHRTC <- x[Inflexion[1]]
points(CHRTC, 0 , pch=6)
text(CHRTC, 0.15, expression(CHR^0))
#############################
#Volumen hídrico simplástico#
#############################
VHS <- (0 - lm2$coefficients[1]) / lm2$coefficients[2]
points(VHS, 0 , pch=4)
text(VHS, 0.15, expression(V_s))
######################
#Potencial de presión#
######################
PP <- y[2] - (coef(lm2)[2] * x[2] + coef(lm2)[1])
#Ecuación de la recta 2
#Y <- coef(lm2)[2] * x + coef(lm2)[1]
#legend("bottomright", c(expression(paste("1 / ", psi^100)),
#                        expression(paste("1/", psi^0)),
#                        expression(CHR^0),
#                        expression(V_s)),
#       pch=c(10,8,6,4))
Resultados <- list(InversoPotencialOsmoticoPlenaTurgencia = as.numeric(IPOPT),
InversoPotencialOsmoticoTurgenciaCero=as.numeric(IPOTC),
ContenidoHidricoRelativoTurgenciaCero=as.numeric(CHRTC),
VolumenHidricoSimplastico=as.numeric(VHS),
PotencialPresion=as.numeric(PP))
return(Resultados)
print(Resultados)
}
PVCurve(1-CRA, IPH)
library(inflection)
PVCurve(1-CRA, IPH)
#definir directorio de trabajo
setwd("C:/Users/usuario/Dropbox/R/00_CurvaPresionVolumen/")
Curva$Peso <- Curva$Peso/1000
#cargar datos
Curva <- read.csv("CurvaPresionVolumen.csv")
#Phi inverso
Curva$InversePhi <- 1/Curva$Phi
#uno menos CRA
Curva$UnoMenosCRA <- 1 - Curva$CRA
#Phi inverso
y <- 1/Curva$Phi
#uno menos CRA
x <- 1 - Curva$CRA
PVCurve(x,y)
CRA <- c(97.8,97.5,96.8,94.9,93.4,92.2,90.9,84.9,78.5,75.3,72.7,70.9,69.9)
CRA
IPH <- c(4,2.22,1.81,1.25,1,0.85,0.8,0.5,0.4,0.38,0.36,0.357,0.347)
plot(100-CRA, IPH)
PVCurve(100-CRA, IPH)
1/1.036327
PVCurve <- function(x,y){
#Encontrar punto de inflexión
Inflexion <- ede(x, y, 0)
Inflexion[1] <- 9
#Generar curvas según punto de inflexión
#Curva 1
lm1 <- lm(y[1:Inflexion[1]] ~ x[1:Inflexion[1]])
#Curva 2
lm2 <- lm(y[Inflexion[1]:length(y)] ~ x[Inflexion[1]:length(x)])
#Distribución de Puntos
plot(x, y, xlab="1 - CRA", ylab=expression(paste("1 / ", psi)), pch=16, main="Curva Presión - Volumen",
xlim=c(-0.001, max(x)+0.5), ylim=c(-0.001, max(y)))
abline(v=0)
abline(h=0)
grid(col="black")
box()
abline(lm1, col="red")
abline(lm2, col="darkgreen")
legend("topright", c("Curva 1", "Curva 2"), col=c("red", "darkgreen"), lty=1)
#Índices derivados de la curva presión - volumen
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
PI <- c()
points(x[Inflexion[1]], y[Inflexion[1]], pch=20, col="red")
text(x[Inflexion[1]] + 0.05, y[Inflexion[1]] + 0.05, expression(paste(psi, rho, "= 0")))
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
IPOPT <- lm2$coefficients[1]
points(0, IPOPT, pch=10)
text(0.01, IPOPT + 0.1, expression(paste("1 / ", psi^100)))
####################################################
#Inverso del potencial osmótico a turgencia cero   #
####################################################
IPOTC <- predict(lm2, 1)[1]
points(0, IPOTC , pch=8)
text(0 +0.1, IPOTC, expression(paste("1/", psi^0)))
#############################################
#Contenido hídrico relativo a turgencia cero#
#############################################
CHRTC <- x[Inflexion[1]]
points(CHRTC, 0 , pch=6)
text(CHRTC, 0.15, expression(CHR^0))
#############################
#Volumen hídrico simplástico#
#############################
VHS <- (0 - lm2$coefficients[1]) / lm2$coefficients[2]
points(VHS, 0 , pch=4)
text(VHS, 0.15, expression(V_s))
######################
#Potencial de presión#
######################
PP <- y[2] - (coef(lm2)[2] * x[2] + coef(lm2)[1])
#Ecuación de la recta 2
#Y <- coef(lm2)[2] * x + coef(lm2)[1]
#legend("bottomright", c(expression(paste("1 / ", psi^100)),
#                        expression(paste("1/", psi^0)),
#                        expression(CHR^0),
#                        expression(V_s)),
#       pch=c(10,8,6,4))
Resultados <- list(InversoPotencialOsmoticoPlenaTurgencia = as.numeric(IPOPT),
InversoPotencialOsmoticoTurgenciaCero=as.numeric(IPOTC),
ContenidoHidricoRelativoTurgenciaCero=as.numeric(CHRTC),
VolumenHidricoSimplastico=as.numeric(VHS),
PotencialPresion=as.numeric(PP))
return(Resultados)
print(Resultados)
}
PVCurve(100-CRA, IPH)
1/0.528
PVCurve <- function(x,y){
#Encontrar punto de inflexión
Inflexion <- ede(x, y, 0)
Inflexion[1] <- 9
#Generar curvas según punto de inflexión
#Curva 1
lm1 <- loess(y[1:Inflexion[1]] ~ x[1:Inflexion[1]])
#Curva 2
lm2 <- lm(y[Inflexion[1]:length(y)] ~ x[Inflexion[1]:length(x)])
#Distribución de Puntos
plot(x, y, xlab="1 - CRA", ylab=expression(paste("1 / ", psi)), pch=16, main="Curva Presión - Volumen",
xlim=c(-0.001, max(x)+0.5), ylim=c(-0.001, max(y)))
abline(v=0)
abline(h=0)
grid(col="black")
box()
abline(lm1, col="red")
abline(lm2, col="darkgreen")
legend("topright", c("Curva 1", "Curva 2"), col=c("red", "darkgreen"), lty=1)
#Índices derivados de la curva presión - volumen
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
PI <- c()
points(x[Inflexion[1]], y[Inflexion[1]], pch=20, col="red")
text(x[Inflexion[1]] + 0.05, y[Inflexion[1]] + 0.05, expression(paste(psi, rho, "= 0")))
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
IPOPT <- lm2$coefficients[1]
points(0, IPOPT, pch=10)
text(0.01, IPOPT + 0.1, expression(paste("1 / ", psi^100)))
####################################################
#Inverso del potencial osmótico a turgencia cero   #
####################################################
IPOTC <- predict(lm2, 1)[1]
points(0, IPOTC , pch=8)
text(0 +0.1, IPOTC, expression(paste("1/", psi^0)))
#############################################
#Contenido hídrico relativo a turgencia cero#
#############################################
CHRTC <- x[Inflexion[1]]
points(CHRTC, 0 , pch=6)
text(CHRTC, 0.15, expression(CHR^0))
#############################
#Volumen hídrico simplástico#
#############################
VHS <- (0 - lm2$coefficients[1]) / lm2$coefficients[2]
points(VHS, 0 , pch=4)
text(VHS, 0.15, expression(V_s))
######################
#Potencial de presión#
######################
PP <- y[2] - (coef(lm2)[2] * x[2] + coef(lm2)[1])
#Ecuación de la recta 2
#Y <- coef(lm2)[2] * x + coef(lm2)[1]
#legend("bottomright", c(expression(paste("1 / ", psi^100)),
#                        expression(paste("1/", psi^0)),
#                        expression(CHR^0),
#                        expression(V_s)),
#       pch=c(10,8,6,4))
Resultados <- list(InversoPotencialOsmoticoPlenaTurgencia = as.numeric(IPOPT),
InversoPotencialOsmoticoTurgenciaCero=as.numeric(IPOTC),
ContenidoHidricoRelativoTurgenciaCero=as.numeric(CHRTC),
VolumenHidricoSimplastico=as.numeric(VHS),
PotencialPresion=as.numeric(PP))
return(Resultados)
print(Resultados)
}
PVCurve(100-CRA, IPH)
PVCurve <- function(x,y){
#Encontrar punto de inflexión
Inflexion <- ede(x, y, 0)
Inflexion[1] <- 9
#Generar curvas según punto de inflexión
#Curva 1
lm1 <- lm(y[1:Inflexion[1]] ~ x[1:Inflexion[1]])
#Curva 2
lm2 <- lm(y[Inflexion[1]:length(y)] ~ x[Inflexion[1]:length(x)])
#Distribución de Puntos
plot(x, y, xlab="1 - CRA", ylab=expression(paste("1 / ", psi)), pch=16, main="Curva Presión - Volumen",
xlim=c(-0.001, max(x)+0.5), ylim=c(-0.001, max(y)))
abline(v=0)
abline(h=0)
loess(lm1)
grid(col="black")
box()
abline(lm1, col="red")
abline(lm2, col="darkgreen")
legend("topright", c("Curva 1", "Curva 2"), col=c("red", "darkgreen"), lty=1)
#Índices derivados de la curva presión - volumen
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
PI <- c()
points(x[Inflexion[1]], y[Inflexion[1]], pch=20, col="red")
text(x[Inflexion[1]] + 0.05, y[Inflexion[1]] + 0.05, expression(paste(psi, rho, "= 0")))
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
IPOPT <- lm2$coefficients[1]
points(0, IPOPT, pch=10)
text(0.01, IPOPT + 0.1, expression(paste("1 / ", psi^100)))
####################################################
#Inverso del potencial osmótico a turgencia cero   #
####################################################
IPOTC <- predict(lm2, 1)[1]
points(0, IPOTC , pch=8)
text(0 +0.1, IPOTC, expression(paste("1/", psi^0)))
#############################################
#Contenido hídrico relativo a turgencia cero#
#############################################
CHRTC <- x[Inflexion[1]]
points(CHRTC, 0 , pch=6)
text(CHRTC, 0.15, expression(CHR^0))
#############################
#Volumen hídrico simplástico#
#############################
VHS <- (0 - lm2$coefficients[1]) / lm2$coefficients[2]
points(VHS, 0 , pch=4)
text(VHS, 0.15, expression(V_s))
######################
#Potencial de presión#
######################
PP <- y[2] - (coef(lm2)[2] * x[2] + coef(lm2)[1])
#Ecuación de la recta 2
#Y <- coef(lm2)[2] * x + coef(lm2)[1]
#legend("bottomright", c(expression(paste("1 / ", psi^100)),
#                        expression(paste("1/", psi^0)),
#                        expression(CHR^0),
#                        expression(V_s)),
#       pch=c(10,8,6,4))
Resultados <- list(InversoPotencialOsmoticoPlenaTurgencia = as.numeric(IPOPT),
InversoPotencialOsmoticoTurgenciaCero=as.numeric(IPOTC),
ContenidoHidricoRelativoTurgenciaCero=as.numeric(CHRTC),
VolumenHidricoSimplastico=as.numeric(VHS),
PotencialPresion=as.numeric(PP))
return(Resultados)
print(Resultados)
}
PVCurve(100-CRA, IPH)
?loess
PVCurve <- function(x,y){
#Encontrar punto de inflexión
Inflexion <- ede(x, y, 0)
Inflexion[1] <- 9
#Generar curvas según punto de inflexión
#Curva 1
lm1 <- smooth(y[1:Inflexion[1]] ~ x[1:Inflexion[1]])
#Curva 2
lm2 <- lm(y[Inflexion[1]:length(y)] ~ x[Inflexion[1]:length(x)])
#Distribución de Puntos
plot(x, y, xlab="1 - CRA", ylab=expression(paste("1 / ", psi)), pch=16, main="Curva Presión - Volumen",
xlim=c(-0.001, max(x)+0.5), ylim=c(-0.001, max(y)))
abline(v=0)
abline(h=0)
loess(lm1)
grid(col="black")
box()
abline(lm1, col="red")
abline(lm2, col="darkgreen")
legend("topright", c("Curva 1", "Curva 2"), col=c("red", "darkgreen"), lty=1)
#Índices derivados de la curva presión - volumen
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
PI <- c()
points(x[Inflexion[1]], y[Inflexion[1]], pch=20, col="red")
text(x[Inflexion[1]] + 0.05, y[Inflexion[1]] + 0.05, expression(paste(psi, rho, "= 0")))
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
IPOPT <- lm2$coefficients[1]
points(0, IPOPT, pch=10)
text(0.01, IPOPT + 0.1, expression(paste("1 / ", psi^100)))
####################################################
#Inverso del potencial osmótico a turgencia cero   #
####################################################
IPOTC <- predict(lm2, 1)[1]
points(0, IPOTC , pch=8)
text(0 +0.1, IPOTC, expression(paste("1/", psi^0)))
#############################################
#Contenido hídrico relativo a turgencia cero#
#############################################
CHRTC <- x[Inflexion[1]]
points(CHRTC, 0 , pch=6)
text(CHRTC, 0.15, expression(CHR^0))
#############################
#Volumen hídrico simplástico#
#############################
VHS <- (0 - lm2$coefficients[1]) / lm2$coefficients[2]
points(VHS, 0 , pch=4)
text(VHS, 0.15, expression(V_s))
######################
#Potencial de presión#
######################
PP <- y[2] - (coef(lm2)[2] * x[2] + coef(lm2)[1])
#Ecuación de la recta 2
#Y <- coef(lm2)[2] * x + coef(lm2)[1]
#legend("bottomright", c(expression(paste("1 / ", psi^100)),
#                        expression(paste("1/", psi^0)),
#                        expression(CHR^0),
#                        expression(V_s)),
#       pch=c(10,8,6,4))
Resultados <- list(InversoPotencialOsmoticoPlenaTurgencia = as.numeric(IPOPT),
InversoPotencialOsmoticoTurgenciaCero=as.numeric(IPOTC),
ContenidoHidricoRelativoTurgenciaCero=as.numeric(CHRTC),
VolumenHidricoSimplastico=as.numeric(VHS),
PotencialPresion=as.numeric(PP))
return(Resultados)
print(Resultados)
}
PVCurve(100-CRA, IPH)
source('C:/Users/usuario/Dropbox/0_Paquetes/CurvaPV/R/PVCurve.R', encoding = 'UTF-8')
PVCurve(100-CRA, IPH)
PVCurve <- function(x,y){
#Encontrar punto de inflexión
Inflexion <- ede(x, y, 0)
#Generar curvas según punto de inflexión
#Curva 1
lm1 <- lm(y[1:Inflexion[1]] ~ x[1:Inflexion[1]])
#Curva 2
lm2 <- lm(y[Inflexion[1]:length(y)] ~ x[Inflexion[1]:length(x)])
#Distribución de Puntos
plot(x, y, xlab="1 - CRA", ylab=expression(paste("1 / ", psi)), pch=16, main="Curva Presión - Volumen",
xlim=c(-0.001, max(x)+0.5), ylim=c(-0.001, max(y)))
abline(v=0)
abline(h=0)
loess(lm1)
grid(col="black")
box()
abline(lm1, col="red")
abline(lm2, col="darkgreen")
legend("topright", c("Curva 1", "Curva 2"), col=c("red", "darkgreen"), lty=1)
#Índices derivados de la curva presión - volumen
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
PI <- c()
points(x[Inflexion[1]], y[Inflexion[1]], pch=20, col="red")
text(x[Inflexion[1]] + 0.05, y[Inflexion[1]] + 0.05, expression(paste(psi, rho, "= 0")))
####################################################
#Inverso del potencial osmótico en plena turgencia #
####################################################
IPOPT <- lm2$coefficients[1]
points(0, IPOPT, pch=10)
text(0.01, IPOPT + 0.1, expression(paste("1 / ", psi^100)))
####################################################
#Inverso del potencial osmótico a turgencia cero   #
####################################################
IPOTC <- predict(lm2, 1)[1]
points(0, IPOTC , pch=8)
text(0 +0.1, IPOTC, expression(paste("1/", psi^0)))
#############################################
#Contenido hídrico relativo a turgencia cero#
#############################################
CHRTC <- x[Inflexion[1]]
points(CHRTC, 0 , pch=6)
text(CHRTC, 0.15, expression(CHR^0))
#############################
#Volumen hídrico simplástico#
#############################
VHS <- (0 - lm2$coefficients[1]) / lm2$coefficients[2]
points(VHS, 0 , pch=4)
text(VHS, 0.15, expression(V_s))
######################
#Potencial de presión#
######################
PP <- y[2] - (coef(lm2)[2] * x[2] + coef(lm2)[1])
#Ecuación de la recta 2
#Y <- coef(lm2)[2] * x + coef(lm2)[1]
#legend("bottomright", c(expression(paste("1 / ", psi^100)),
#                        expression(paste("1/", psi^0)),
#                        expression(CHR^0),
#                        expression(V_s)),
#       pch=c(10,8,6,4))
Resultados <- list(InversoPotencialOsmoticoPlenaTurgencia = as.numeric(IPOPT),
InversoPotencialOsmoticoTurgenciaCero=as.numeric(IPOTC),
ContenidoHidricoRelativoTurgenciaCero=as.numeric(CHRTC),
VolumenHidricoSimplastico=as.numeric(VHS),
PotencialPresion=as.numeric(PP))
return(Resultados)
print(Resultados)
}
